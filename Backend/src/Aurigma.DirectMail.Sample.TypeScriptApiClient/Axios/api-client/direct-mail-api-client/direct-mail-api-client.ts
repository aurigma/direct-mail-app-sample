//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ApiClientConfiguration {
    apiUrl: string;
}

export class ApiClientBase {
    constructor(private configuration: ApiClientConfiguration) {}

    protected async transformOptions(options: any): Promise<any> {

        options = {...options, transformResponse: (res) => res, responseType: 'json'};

        return options;
    }

    protected getBaseUrl(defultUrl: string) {
        return this.configuration.apiUrl;
    }

    protected transformResult(url: string, res: any, cb: (res: any) => Promise<any>): Promise<any> {
        return cb(res);
    }
}

export interface IBuildInfoApiClient {

    /**
     * Returns build info.
     * @return Success
     */
    headInfo(): Promise<void>;

    /**
     * Returns build info.
     * @return Success
     */
    getInfo(): Promise<BuildInfoModel>;
}

export class BuildInfoApiClient extends ApiClientBase implements IBuildInfoApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ApiClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Returns build info.
     * @return Success
     */
    headInfo(): Promise<void> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/info";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "HEAD",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processHeadInfo(_response));
        });
    }

    protected processHeadInfo(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Returns build info.
     * @return Success
     */
    getInfo(): Promise<BuildInfoModel> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/info";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetInfo(_response));
        });
    }

    protected processGetInfo(response: Response): Promise<BuildInfoModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as BuildInfoModel;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BuildInfoModel>(null as any);
    }
}

export interface ICampaignApiClient {

    /**
     * Returns a list of all campaigns.
     * @param type (optional) Campaign type.
     * @param companyId (optional) Linked company id.
     * @return Success
     */
    getCampaigns(type?: CampaignType | undefined, companyId?: string | undefined): Promise<CampaignDto[]>;

    /**
     * Creates a new campaign.
     * @param body Creation model Aurigma.DirectMail.Sample.WebApi.Models.Campaign.CampaignCreationModel
     * @return Created
     */
    createCampaign(body: CampaignCreationModel): Promise<CampaignDto>;

    /**
     * Returns a campaign by id.
     * @param id Campaign's id.
     * @return Success
     */
    getCampaignById(id: string): Promise<CampaignDto>;

    /**
     * Updates a campaign
     * @param id Campaign's id.
     * @param body (optional) Update model.
     * @return Success
     */
    updateCampaign(id: string, body?: CampaignUpdateModel | undefined): Promise<CampaignDto>;

    /**
     * Returns available campaign types.
     * @return Success
     */
    getCampaignTypes(): Promise<CampaignType[]>;
}

export class CampaignApiClient extends ApiClientBase implements ICampaignApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ApiClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Returns a list of all campaigns.
     * @param type (optional) Campaign type.
     * @param companyId (optional) Linked company id.
     * @return Success
     */
    getCampaigns(type?: CampaignType | undefined, companyId?: string | undefined): Promise<CampaignDto[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/campaigns?";
        if (type === null)
            throw new Error("The parameter 'type' cannot be null.");
        else if (type !== undefined)
            url_ += "Type=" + encodeURIComponent("" + type) + "&";
        if (companyId === null)
            throw new Error("The parameter 'companyId' cannot be null.");
        else if (companyId !== undefined)
            url_ += "CompanyId=" + encodeURIComponent("" + companyId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetCampaigns(_response));
        });
    }

    protected processGetCampaigns(response: Response): Promise<CampaignDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CampaignDto[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignDto[]>(null as any);
    }

    /**
     * Creates a new campaign.
     * @param body Creation model Aurigma.DirectMail.Sample.WebApi.Models.Campaign.CampaignCreationModel
     * @return Created
     */
    createCampaign(body: CampaignCreationModel): Promise<CampaignDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/campaigns";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateCampaign(_response));
        });
    }

    protected processCreateCampaign(response: Response): Promise<CampaignDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            result201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CampaignDto;
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignDto>(null as any);
    }

    /**
     * Returns a campaign by id.
     * @param id Campaign's id.
     * @return Success
     */
    getCampaignById(id: string): Promise<CampaignDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/campaigns/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetCampaignById(_response));
        });
    }

    protected processGetCampaignById(response: Response): Promise<CampaignDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CampaignDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignDto>(null as any);
    }

    /**
     * Updates a campaign
     * @param id Campaign's id.
     * @param body (optional) Update model.
     * @return Success
     */
    updateCampaign(id: string, body?: CampaignUpdateModel | undefined): Promise<CampaignDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/campaigns/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateCampaign(_response));
        });
    }

    protected processUpdateCampaign(response: Response): Promise<CampaignDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CampaignDto;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignDto>(null as any);
    }

    /**
     * Returns available campaign types.
     * @return Success
     */
    getCampaignTypes(): Promise<CampaignType[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/campaigns/types";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetCampaignTypes(_response));
        });
    }

    protected processGetCampaignTypes(response: Response): Promise<CampaignType[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CampaignType[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CampaignType[]>(null as any);
    }
}

export interface ICategoryApiClient {

    /**
     * Returns a list of all categories.
     * @return Success
     */
    getCategories(): Promise<CategoryDto[]>;

    /**
     * Creates a new category.
     * @param body (optional) Creation model Aurigma.DirectMail.Sample.WebApi.Models.Category.CategoryCreationModel
     * @return Created
     */
    createCategory(body?: CategoryCreationModel | undefined): Promise<CategoryDto>;

    /**
     * Returns a category by id.
     * @param id Category's id.
     * @return Success
     */
    getCategory(id: string): Promise<CategoryDto>;
}

export class CategoryApiClient extends ApiClientBase implements ICategoryApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ApiClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Returns a list of all categories.
     * @return Success
     */
    getCategories(): Promise<CategoryDto[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/categories";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetCategories(_response));
        });
    }

    protected processGetCategories(response: Response): Promise<CategoryDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CategoryDto[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryDto[]>(null as any);
    }

    /**
     * Creates a new category.
     * @param body (optional) Creation model Aurigma.DirectMail.Sample.WebApi.Models.Category.CategoryCreationModel
     * @return Created
     */
    createCategory(body?: CategoryCreationModel | undefined): Promise<CategoryDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/categories";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateCategory(_response));
        });
    }

    protected processCreateCategory(response: Response): Promise<CategoryDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            result201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CategoryDto;
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryDto>(null as any);
    }

    /**
     * Returns a category by id.
     * @param id Category's id.
     * @return Success
     */
    getCategory(id: string): Promise<CategoryDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/categories/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetCategory(_response));
        });
    }

    protected processGetCategory(response: Response): Promise<CategoryDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CategoryDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CategoryDto>(null as any);
    }
}

export interface ICompanyApiClient {

    /**
     * @return Success
     */
    getCompanies(): Promise<CompanyDto[]>;

    /**
     * @return Created
     */
    createCompany(body: CompanyCreationModel): Promise<CompanyDto>;

    /**
     * @return Success
     */
    getCompany(id: string): Promise<CompanyDto>;
}

export class CompanyApiClient extends ApiClientBase implements ICompanyApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ApiClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * @return Success
     */
    getCompanies(): Promise<CompanyDto[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/companies";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetCompanies(_response));
        });
    }

    protected processGetCompanies(response: Response): Promise<CompanyDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CompanyDto[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyDto[]>(null as any);
    }

    /**
     * @return Created
     */
    createCompany(body: CompanyCreationModel): Promise<CompanyDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/companies";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateCompany(_response));
        });
    }

    protected processCreateCompany(response: Response): Promise<CompanyDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            result201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CompanyDto;
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyDto>(null as any);
    }

    /**
     * @return Success
     */
    getCompany(id: string): Promise<CompanyDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/companies/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetCompany(_response));
        });
    }

    protected processGetCompany(response: Response): Promise<CompanyDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as CompanyDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CompanyDto>(null as any);
    }
}

export interface IEditorApiClient {

    /**
     * Returns a integration details data necessary to initialize the editor.
     * @param referenceId (optional) Product reference id.
     * @return Success
     */
    getIntegrationDetails(referenceId?: string | undefined): Promise<IntegrationDetailsDto>;

    /**
     * Returns a token for Design Editor.
     * @param body (optional) Request model.
     * @return Success
     */
    getEditorToken(body?: TokenRequestModel | undefined): Promise<TokenDto>;

    /**
     * Validates a design for the presence of VDP variables.
     * @param lineItemId (optional) Current line item id.
     * @return Success
     */
    validateDesign(lineItemId?: string | undefined): Promise<DesignValidationResultDto>;

    /**
     * Returns a collection of available variables.
     * @param lineItemId (optional) Current line item id.
     * @return Success
     */
    getAvailableVariables(lineItemId?: string | undefined): Promise<EditorVariableInfoDto[]>;

    /**
     * Creates a design for personalization in the Design Editor.
     * @param lineItemId Current line item id.
     * @param userId Storefront user id.
     * @return Success
     */
    createEditorDesign(lineItemId: string, userId: string): Promise<DesignDto>;
}

export class EditorApiClient extends ApiClientBase implements IEditorApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ApiClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Returns a integration details data necessary to initialize the editor.
     * @param referenceId (optional) Product reference id.
     * @return Success
     */
    getIntegrationDetails(referenceId?: string | undefined): Promise<IntegrationDetailsDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/editor/integration-details?";
        if (referenceId === null)
            throw new Error("The parameter 'referenceId' cannot be null.");
        else if (referenceId !== undefined)
            url_ += "referenceId=" + encodeURIComponent("" + referenceId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetIntegrationDetails(_response));
        });
    }

    protected processGetIntegrationDetails(response: Response): Promise<IntegrationDetailsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as IntegrationDetailsDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IntegrationDetailsDto>(null as any);
    }

    /**
     * Returns a token for Design Editor.
     * @param body (optional) Request model.
     * @return Success
     */
    getEditorToken(body?: TokenRequestModel | undefined): Promise<TokenDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/editor/token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetEditorToken(_response));
        });
    }

    protected processGetEditorToken(response: Response): Promise<TokenDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as TokenDto;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TokenDto>(null as any);
    }

    /**
     * Validates a design for the presence of VDP variables.
     * @param lineItemId (optional) Current line item id.
     * @return Success
     */
    validateDesign(lineItemId?: string | undefined): Promise<DesignValidationResultDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/editor/validate-design?";
        if (lineItemId === null)
            throw new Error("The parameter 'lineItemId' cannot be null.");
        else if (lineItemId !== undefined)
            url_ += "lineItemId=" + encodeURIComponent("" + lineItemId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processValidateDesign(_response));
        });
    }

    protected processValidateDesign(response: Response): Promise<DesignValidationResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as DesignValidationResultDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DesignValidationResultDto>(null as any);
    }

    /**
     * Returns a collection of available variables.
     * @param lineItemId (optional) Current line item id.
     * @return Success
     */
    getAvailableVariables(lineItemId?: string | undefined): Promise<EditorVariableInfoDto[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/editor/available-variables?";
        if (lineItemId === null)
            throw new Error("The parameter 'lineItemId' cannot be null.");
        else if (lineItemId !== undefined)
            url_ += "lineItemId=" + encodeURIComponent("" + lineItemId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetAvailableVariables(_response));
        });
    }

    protected processGetAvailableVariables(response: Response): Promise<EditorVariableInfoDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as EditorVariableInfoDto[];
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EditorVariableInfoDto[]>(null as any);
    }

    /**
     * Creates a design for personalization in the Design Editor.
     * @param lineItemId Current line item id.
     * @param userId Storefront user id.
     * @return Success
     */
    createEditorDesign(lineItemId: string, userId: string): Promise<DesignDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/editor/design?";
        if (lineItemId === undefined || lineItemId === null)
            throw new Error("The parameter 'lineItemId' must be defined and cannot be null.");
        else
            url_ += "lineItemId=" + encodeURIComponent("" + lineItemId) + "&";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined and cannot be null.");
        else
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateEditorDesign(_response));
        });
    }

    protected processCreateEditorDesign(response: Response): Promise<DesignDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as DesignDto;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DesignDto>(null as any);
    }
}

export interface IIntegratedProductApiClient {

    /**
     * Returns a list of all integrated products.
     * @param categoryId (optional) 
     * @return Success
     */
    getIntegratedProducts(categoryId?: string | undefined): Promise<IntegratedProductDto[]>;

    /**
     * Updates a integrated product resources.
     * @param id Product identifier.
     * @return Success
     */
    updateIntegratedProductResources(id: string): Promise<void>;

    /**
     * Returns a list of all integrated product options.
     * @param id Product id.
     * @return Success
     */
    getIntegratedProductOptions(id: string): Promise<IntegratedProductOptionDto[]>;

    /**
     * Returns a list of all integrated product templates.
     * @param id Product id.
     * @param body (optional) Defines options filter.
     * @return Success
     */
    getIntegratedProductTemplates(id: string, body?: IntegrationProductOptionRequestModel | undefined): Promise<IntegratedProductTemplateDto[]>;

    /**
     * Returns a integrated product template details.
     * @param id Product id.
     * @param templateId Template id.
     * @param productVariantId (optional) Customer's Canvas product id.
     * @return Success
     */
    getIntegratedProductTemplateDetails(id: string, templateId: string, productVariantId?: number | undefined): Promise<IntegratedProductTemplateDetailsDto>;
}

export class IntegratedProductApiClient extends ApiClientBase implements IIntegratedProductApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ApiClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Returns a list of all integrated products.
     * @param categoryId (optional) 
     * @return Success
     */
    getIntegratedProducts(categoryId?: string | undefined): Promise<IntegratedProductDto[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/integrated-products?";
        if (categoryId === null)
            throw new Error("The parameter 'categoryId' cannot be null.");
        else if (categoryId !== undefined)
            url_ += "CategoryId=" + encodeURIComponent("" + categoryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetIntegratedProducts(_response));
        });
    }

    protected processGetIntegratedProducts(response: Response): Promise<IntegratedProductDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as IntegratedProductDto[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IntegratedProductDto[]>(null as any);
    }

    /**
     * Updates a integrated product resources.
     * @param id Product identifier.
     * @return Success
     */
    updateIntegratedProductResources(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/integrated-products/{id}/update-resources";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateIntegratedProductResources(_response));
        });
    }

    protected processUpdateIntegratedProductResources(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Returns a list of all integrated product options.
     * @param id Product id.
     * @return Success
     */
    getIntegratedProductOptions(id: string): Promise<IntegratedProductOptionDto[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/integrated-products/{id}/options";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetIntegratedProductOptions(_response));
        });
    }

    protected processGetIntegratedProductOptions(response: Response): Promise<IntegratedProductOptionDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as IntegratedProductOptionDto[];
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IntegratedProductOptionDto[]>(null as any);
    }

    /**
     * Returns a list of all integrated product templates.
     * @param id Product id.
     * @param body (optional) Defines options filter.
     * @return Success
     */
    getIntegratedProductTemplates(id: string, body?: IntegrationProductOptionRequestModel | undefined): Promise<IntegratedProductTemplateDto[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/integrated-products/{id}/templates";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetIntegratedProductTemplates(_response));
        });
    }

    protected processGetIntegratedProductTemplates(response: Response): Promise<IntegratedProductTemplateDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as IntegratedProductTemplateDto[];
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IntegratedProductTemplateDto[]>(null as any);
    }

    /**
     * Returns a integrated product template details.
     * @param id Product id.
     * @param templateId Template id.
     * @param productVariantId (optional) Customer's Canvas product id.
     * @return Success
     */
    getIntegratedProductTemplateDetails(id: string, templateId: string, productVariantId?: number | undefined): Promise<IntegratedProductTemplateDetailsDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/integrated-products/{id}/templates/{templateId}?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (templateId === undefined || templateId === null)
            throw new Error("The parameter 'templateId' must be defined.");
        url_ = url_.replace("{templateId}", encodeURIComponent("" + templateId));
        if (productVariantId === null)
            throw new Error("The parameter 'productVariantId' cannot be null.");
        else if (productVariantId !== undefined)
            url_ += "ProductVariantId=" + encodeURIComponent("" + productVariantId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetIntegratedProductTemplateDetails(_response));
        });
    }

    protected processGetIntegratedProductTemplateDetails(response: Response): Promise<IntegratedProductTemplateDetailsDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as IntegratedProductTemplateDetailsDto;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<IntegratedProductTemplateDetailsDto>(null as any);
    }
}

export interface IJobApiClient {

    /**
     * Returns a list of jobs.
     * @param lineItemId (optional) 
     * @return Success
     */
    getJobs(lineItemId?: string | undefined): Promise<JobDto[]>;
}

export class JobApiClient extends ApiClientBase implements IJobApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ApiClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Returns a list of jobs.
     * @param lineItemId (optional) 
     * @return Success
     */
    getJobs(lineItemId?: string | undefined): Promise<JobDto[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/jobs?";
        if (lineItemId === null)
            throw new Error("The parameter 'lineItemId' cannot be null.");
        else if (lineItemId !== undefined)
            url_ += "LineItemId=" + encodeURIComponent("" + lineItemId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetJobs(_response));
        });
    }

    protected processGetJobs(response: Response): Promise<JobDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as JobDto[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<JobDto[]>(null as any);
    }
}

export interface IApiClient {

    /**
     * Restarts a job.
     * @param id Job id.
     * @return Success
     */
    restart(id: string): Promise<JobDto>;

    /**
     * Returns a collection of processing results.
     * @param id Job id.
     * @return Success
     */
    downloadResults(id: string): Promise<JobProcessingResultDto[]>;
}

export class ApiClient extends ApiClientBase implements IApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ApiClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Restarts a job.
     * @param id Job id.
     * @return Success
     */
    restart(id: string): Promise<JobDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/jobs/{id}/restart";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processRestart(_response));
        });
    }

    protected processRestart(response: Response): Promise<JobDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as JobDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<JobDto>(null as any);
    }

    /**
     * Returns a collection of processing results.
     * @param id Job id.
     * @return Success
     */
    downloadResults(id: string): Promise<JobProcessingResultDto[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/jobs/{id}/download-results";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDownloadResults(_response));
        });
    }

    protected processDownloadResults(response: Response): Promise<JobProcessingResultDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as JobProcessingResultDto[];
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<JobProcessingResultDto[]>(null as any);
    }
}

export interface ILineItemApiClient {

    /**
     * Returns a list of all line items.
     * @param campaignId (optional) 
     * @return Success
     */
    getLineItems(campaignId?: string | undefined): Promise<LineItemDto[]>;

    /**
     * Creates a new line item.
     * @return Created
     */
    createLineItem(body: LineItemCreationModel): Promise<LineItemDto>;

    /**
     * Returns a line item by ID.
     * @param id Line item id.
     * @return Success
     */
    getLineItem(id: string): Promise<LineItemDto>;

    /**
     * Updates the line item.
     * @param id Line item ID.
     * @param body Update model Aurigma.DirectMail.Sample.WebApi.Models.LineItem.LineItemUpdateModel
     * @return Success
     */
    updateLineItem(id: string, body: LineItemUpdateModel): Promise<LineItemDto>;

    /**
     * Process finish line item personalization.
     * @param id Line item id.
     * @return Created
     */
    finishPersonalizationLineItem(id: string): Promise<void>;
}

export class LineItemApiClient extends ApiClientBase implements ILineItemApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ApiClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Returns a list of all line items.
     * @param campaignId (optional) 
     * @return Success
     */
    getLineItems(campaignId?: string | undefined): Promise<LineItemDto[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/line-items?";
        if (campaignId === null)
            throw new Error("The parameter 'campaignId' cannot be null.");
        else if (campaignId !== undefined)
            url_ += "CampaignId=" + encodeURIComponent("" + campaignId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetLineItems(_response));
        });
    }

    protected processGetLineItems(response: Response): Promise<LineItemDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as LineItemDto[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LineItemDto[]>(null as any);
    }

    /**
     * Creates a new line item.
     * @return Created
     */
    createLineItem(body: LineItemCreationModel): Promise<LineItemDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/line-items";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateLineItem(_response));
        });
    }

    protected processCreateLineItem(response: Response): Promise<LineItemDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            result201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as LineItemDto;
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LineItemDto>(null as any);
    }

    /**
     * Returns a line item by ID.
     * @param id Line item id.
     * @return Success
     */
    getLineItem(id: string): Promise<LineItemDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/line-items/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetLineItem(_response));
        });
    }

    protected processGetLineItem(response: Response): Promise<LineItemDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as LineItemDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LineItemDto>(null as any);
    }

    /**
     * Updates the line item.
     * @param id Line item ID.
     * @param body Update model Aurigma.DirectMail.Sample.WebApi.Models.LineItem.LineItemUpdateModel
     * @return Success
     */
    updateLineItem(id: string, body: LineItemUpdateModel): Promise<LineItemDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/line-items/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processUpdateLineItem(_response));
        });
    }

    protected processUpdateLineItem(response: Response): Promise<LineItemDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as LineItemDto;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LineItemDto>(null as any);
    }

    /**
     * Process finish line item personalization.
     * @param id Line item id.
     * @return Created
     */
    finishPersonalizationLineItem(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/line-items/{id}/finish";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processFinishPersonalizationLineItem(_response));
        });
    }

    protected processFinishPersonalizationLineItem(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IPreviewApiClient {

    /**
     * Returns a design info.
     * @param lineItemId (optional) 
     * @return Success
     */
    getDesignInfo(lineItemId?: string | undefined): Promise<DesignInfoDto>;

    /**
     * Returns a proof file.
     * @param body (optional) Request body.
     * @return Success
     */
    renderDesignProof(body?: ProofRequestModel | undefined): Promise<FileResponse>;

    /**
     * Returns a preview file.
     * @param body (optional) Request body.
     * @return Success
     */
    renderDesignPreview(body?: PreviewRequestModel | undefined): Promise<FileResponse>;

    /**
     * Returns an archive with proofs.
     * @param body (optional) Request body.
     * @return Success
     */
    downloadProofsArchive(body?: ProofsZipRequestModel | undefined): Promise<FileResponse>;
}

export class PreviewApiClient extends ApiClientBase implements IPreviewApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ApiClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Returns a design info.
     * @param lineItemId (optional) 
     * @return Success
     */
    getDesignInfo(lineItemId?: string | undefined): Promise<DesignInfoDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/previews/design-info?";
        if (lineItemId === null)
            throw new Error("The parameter 'lineItemId' cannot be null.");
        else if (lineItemId !== undefined)
            url_ += "LineItemId=" + encodeURIComponent("" + lineItemId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetDesignInfo(_response));
        });
    }

    protected processGetDesignInfo(response: Response): Promise<DesignInfoDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as DesignInfoDto;
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DesignInfoDto>(null as any);
    }

    /**
     * Returns a proof file.
     * @param body (optional) Request body.
     * @return Success
     */
    renderDesignProof(body?: ProofRequestModel | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/previews/proof";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processRenderDesignProof(_response));
        });
    }

    protected processRenderDesignProof(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * Returns a preview file.
     * @param body (optional) Request body.
     * @return Success
     */
    renderDesignPreview(body?: PreviewRequestModel | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/previews/preview";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processRenderDesignPreview(_response));
        });
    }

    protected processRenderDesignPreview(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * Returns an archive with proofs.
     * @param body (optional) Request body.
     * @return Success
     */
    downloadProofsArchive(body?: ProofsZipRequestModel | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/previews/proofs-zip";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processDownloadProofsArchive(_response));
        });
    }

    protected processDownloadProofsArchive(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            result400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            result409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ConflictDto;
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export interface IProductApiClient {

    /**
     * Returns a list of all products.
     * @param categoryId (optional) 
     * @return Success
     */
    getProducts(categoryId?: string | undefined): Promise<ProductDto[]>;

    /**
     * Creates a new product.
     * @param body Creation model Aurigma.DirectMail.Sample.WebApi.Models.Products.ProductCreationModel
     * @return Created
     */
    createProduct(body: ProductCreationModel): Promise<ProductDto>;

    /**
     * Returns a product by id.
     * @param id Product's id.
     * @return Success
     */
    getProduct(id: string): Promise<ProductDto>;
}

export class ProductApiClient extends ApiClientBase implements IProductApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ApiClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Returns a list of all products.
     * @param categoryId (optional) 
     * @return Success
     */
    getProducts(categoryId?: string | undefined): Promise<ProductDto[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/products?";
        if (categoryId === null)
            throw new Error("The parameter 'categoryId' cannot be null.");
        else if (categoryId !== undefined)
            url_ += "CategoryId=" + encodeURIComponent("" + categoryId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetProducts(_response));
        });
    }

    protected processGetProducts(response: Response): Promise<ProductDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProductDto[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductDto[]>(null as any);
    }

    /**
     * Creates a new product.
     * @param body Creation model Aurigma.DirectMail.Sample.WebApi.Models.Products.ProductCreationModel
     * @return Created
     */
    createProduct(body: ProductCreationModel): Promise<ProductDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/products";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreateProduct(_response));
        });
    }

    protected processCreateProduct(response: Response): Promise<ProductDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            result201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProductDto;
            return result201;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductDto>(null as any);
    }

    /**
     * Returns a product by id.
     * @param id Product's id.
     * @return Success
     */
    getProduct(id: string): Promise<ProductDto> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/products/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetProduct(_response));
        });
    }

    protected processGetProduct(response: Response): Promise<ProductDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProductDto;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            result404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ProblemDetails;
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductDto>(null as any);
    }
}

export interface IRecipientListApiClient {

    /**
     * Returns a collection of all recipient lists.
     * @return Success
     */
    getRecipientLists(): Promise<RecipientListDto[]>;

    /**
     * Submit a recipient lists.
     * @param body (optional) 
     * @return Success
     */
    submitRecipientLists(body?: RecipientListSubmitModel | undefined): Promise<RecipientListDto[]>;
}

export class RecipientListApiClient extends ApiClientBase implements IRecipientListApiClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: ApiClientConfiguration, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("", baseUrl);
    }

    /**
     * Returns a collection of all recipient lists.
     * @return Success
     */
    getRecipientLists(): Promise<RecipientListDto[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/recipient-lists";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetRecipientLists(_response));
        });
    }

    protected processGetRecipientLists(response: Response): Promise<RecipientListDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as RecipientListDto[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RecipientListDto[]>(null as any);
    }

    /**
     * Submit a recipient lists.
     * @param body (optional) 
     * @return Success
     */
    submitRecipientLists(body?: RecipientListSubmitModel | undefined): Promise<RecipientListDto[]> {
        let url_ = this.baseUrl + "/api/direct-mail/v1/recipient-lists/submit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processSubmitRecipientLists(_response));
        });
    }

    protected processSubmitRecipientLists(response: Response): Promise<RecipientListDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as RecipientListDto[];
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<RecipientListDto[]>(null as any);
    }
}

/** Model with information about the application. */
export interface BuildInfoModel {
    /** Version number. */
    readonly version?: string | null;
    /** Build date (UTC). */
    readonly buildDate?: string | null;
    /** Build configuration (Debug or Release). */
    readonly configuration?: string | null;
    /** Application name. */
    readonly appName?: string | null;
}

export interface CampaignCreationModel {
    /** Title. */
    title?: string | null;
    type?: CampaignType;
    /** Company Id. */
    companyId?: string;
}

export interface CampaignDto {
    /** Unique identifier. */
    id?: string;
    /** Title. */
    title?: string | null;
    type?: CampaignType;
    lineItems?: LineItemDto[] | null;
    recipientListIds?: string[] | null;
}

export enum CampaignType {
    Default = "Default",
}

export interface CampaignUpdateModel {
    /** Title. */
    title?: string | null;
    type?: CampaignType;
    /** Collection of recipient list ids. */
    recipientListIds?: string[] | null;
}

export interface CategoryCreationModel {
    title?: string | null;
}

export interface CategoryDto {
    id?: string;
    title?: string | null;
}

export interface CompanyCreationModel {
    name?: string | null;
}

export interface CompanyDto {
    id?: string;
    name?: string | null;
}

export interface ConflictDto {
    propertyName?: string | null;
    propertyValue?: string | null;
    description?: string | null;
}

export interface DesignDto {
    id?: string | null;
}

export interface DesignInfoDto {
    /** Design ID. */
    id?: string | null;
    /** Design surfaces count. */
    surfaceCount?: number;
}

export interface DesignValidationResultDto {
    missingListVariableNames?: string[] | null;
    missingDesignVariableNames?: string[] | null;
    isValid?: boolean;
}

export enum EditorVariableInfoBarcodeFormat {
    EAN_8 = "EAN_8",
    EAN_13 = "EAN_13",
    QR_CODE = "QR_CODE",
}

export enum EditorVariableInfoBarcodeSubType {
    None = "None",
    Phone = "Phone",
    Url = "Url",
}

export interface EditorVariableInfoDto {
    /** Variable name. */
    name?: string | null;
    type?: EditorVariableInfoType;
    barcodeFormat?: EditorVariableInfoBarcodeFormat;
    barcodeSubType?: EditorVariableInfoBarcodeSubType;
}

export enum EditorVariableInfoType {
    Text = "Text",
    CustomImage = "CustomImage",
    CustomBarcode = "CustomBarcode",
}

export interface IntegratedProductDto {
    /** Unique identifier. */
    id?: string;
    /** Product title. */
    title?: string | null;
    /** Product price. */
    price?: number;
    /** Customer's canvas preview url. */
    previewUrl?: string | null;
    /** Product ID in Customers Canvas. */
    customersCanvasProductId?: number;
    /** Product category id. */
    categoryId?: string | null;
}

export interface IntegratedProductOptionDto {
    id?: number;
    title?: string | null;
    optionType?: IntegratedProductOptionType;
    values?: IntegratedProductOptionValueDto[] | null;
}

export enum IntegratedProductOptionType {
    Radio = "Radio",
    Dropdown = "Dropdown",
    Chips = "Chips",
    ColorGrid = "ColorGrid",
    ColorList = "ColorList",
    ImageGrid = "ImageGrid",
}

export interface IntegratedProductOptionValueDto {
    id?: number;
    title?: string | null;
    sortIndex?: number;
}

export interface IntegratedProductTemplateDetailsDto {
    templateId?: string | null;
    templateName?: string | null;
    productVariantId?: number;
    options?: IntegratedProductTemplateDetailsOptionDto[] | null;
    previewUrls?: string[] | null;
    customFields?: { [key: string]: any; } | null;
}

export interface IntegratedProductTemplateDetailsOptionDto {
    title?: string | null;
    value?: string | null;
}

export interface IntegratedProductTemplateDto {
    templateId?: string | null;
    templateName?: string | null;
    productVariantId?: number;
    previewUrl?: string | null;
}

export interface IntegrationDetailsDto {
    designEditorUrl?: string | null;
    productPersonalizationWorkflow?: string | null;
}

export interface IntegrationProductOptionItemRequestModel {
    /** Customer's canvas product option id. */
    optionId?: number;
    /** / Customer's canvas product option value ids. */
    valueIds?: number[] | null;
}

export interface IntegrationProductOptionRequestModel {
    templateTitle?: string | null;
    options?: IntegrationProductOptionItemRequestModel[] | null;
}

export interface JobDto {
    /** Job id. */
    id?: string;
    /** Customer's Canvas project id. */
    customersCanvasProjectId?: number;
    status?: JobStatus;
}

export interface JobProcessingResultDto {
    /** File url. */
    url?: string | null;
    /** File name. */
    name?: string | null;
    /** File format. */
    format?: string | null;
}

export enum JobStatus {
    Pending = "Pending",
    InProgress = "InProgress",
    Completed = "Completed",
    Failed = "Failed",
}

export interface LineItemCreationModel {
    campaignId?: string;
    quantity?: number;
    productId?: string;
    templateId?: string | null;
}

export interface LineItemDto {
    id?: string;
    quantity?: number;
    productId?: string | null;
    campaignId?: string | null;
    templateId?: string | null;
    productVariantId?: number | null;
    /** Personalized design id. */
    designId?: string | null;
}

export interface LineItemUpdateModel {
    /** Campaign id. */
    campaignId?: string;
    /** Product quantity. */
    quantity?: number;
    /** Product id. */
    productId?: string;
    /** Template id. */
    templateId?: string | null;
    /** Personalized design id. */
    designId?: string | null;
    /** Selected product variant id. */
    productVariantId?: number | null;
}

export interface PreviewConfigRequestModel {
    /** Preview width. */
    width?: number;
    /** Preview height. */
    height?: number;
    /** Design's surface index. */
    surfaceIndex?: number;
}

export interface PreviewRequestModel {
    /** Recipient id. */
    recipientId?: string | null;
    /** Current line item id. */
    lineItemId?: string;
    config?: PreviewConfigRequestModel;
}

export interface ProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;

    [key: string]: any;
}

export interface ProductCreationModel {
    title?: string | null;
    price?: number;
    categoryId?: string | null;
}

export interface ProductDto {
    id?: string;
    title?: string | null;
    price?: number;
    categoryId?: string | null;
}

/** Rendering preview config. */
export interface ProofRequestConfigModel {
    /** Preview width. */
    width?: number;
    /** Preview height. */
    height?: number;
    /** Design's surface index. */
    surfaceIndex?: number;
}

export interface ProofRequestModel {
    /** Recipient id. */
    recipientId?: string;
    /** Current line item id. */
    lineItemId?: string;
    config?: ProofRequestConfigModel;
}

/** Rendeign preview config. */
export interface ProofsZipRequestConfigModel {
    /** Preview width. */
    width?: number;
    /** Preview height. */
    height?: number;
}

export interface ProofsZipRequestModel {
    /** Current line item id. */
    lineItemId?: string;
    config?: ProofsZipRequestConfigModel;
}

export interface RecipientDto {
    /** Recipient identifier. */
    id?: string;
    /** Recipient first name. */
    firstName?: string | null;
    /** Recipient full name. */
    fullName?: string | null;
    /** Recipient signature. */
    signature?: string | null;
    /** Recipient state of residence. */
    state?: string | null;
    /** Recipient city of residence. */
    city?: string | null;
    /** Address first line. */
    addressLine1?: string | null;
    /** Address second line. */
    addressLine2?: string | null;
    /** Postal zip code. */
    zip?: string | null;
    /** Return state. */
    returnState?: string | null;
    /** Return city. */
    returnCity?: string | null;
    /** Return postal zip code. */
    returnZip?: string | null;
    /** Return address first line. */
    returnAddressLine1?: string | null;
    /** Return address second line. */
    returnAddressLine2?: string | null;
    /** Project title. */
    title?: string | null;
    /** QR code line. */
    qrCodeUrl?: string | null;
}

export interface RecipientListDto {
    id?: string;
    title?: string | null;
    recipients?: RecipientDto[] | null;
}

export interface RecipientListSubmitModel {
    campaignId?: string;
    recipientListIds?: string[] | null;
}

export interface TokenDto {
    tokenId?: string | null;
    expireTime?: string;
    originalSeconds?: number;
}

export interface TokenRequestModel {
    /** Storefront user id. */
    userId?: string | null;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}